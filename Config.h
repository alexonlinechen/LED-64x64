
#include <LittleFS.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPUpdateServer.h>
#include <EEPROM.h>

#define matrix_width 64
#define matrix_height 64


// 設定網路相關
ESP8266WebServer server(80);
ESP8266HTTPUpdateServer httpUpdateServer;

//網路時間相關設定
#include <time.h>  
#define MY_NTP_SERVER "at.pool.ntp.org"   //伺服器        
#define MY_TZ "CST-8"  //時區
time_t now;       
tm tm;  


//簡易eeprom 參數
struct dataType{
char testssid[32]; 
char testpass[32];
};


String setssid;
String setpwd;

uint8_t brightnessNow = 10;   // uint8_t　專門給顯示器用
int Mode;
int hue = 180;//总颜色
int hueh = 180;
int huem = 180;
int hues = 180;
int huew = 180;
int hueb = 180;

int randomMode = 1 ;

//固定顯示 時間開始/結束參數
int start_H = 0;
int start_M = 0;
int end_H = 0;
int end_M = 0;

int read_start_H = 0 ;
int read_start_M = 0 ;
int read_end_H = 0 ;
int read_end_M = 0 ;


boolean runonce = true;
boolean randomColor = false;

unsigned long colonTime = 0;
unsigned long lastTime = 0;
unsigned long randomTime = 0;
unsigned long last_H_Time = 0;
unsigned long last_M_Time = 0;

String GIFname = "main.gif" ;  //GIF檔名參數

int GIF_R_name = 1 ;  //隨機GIF檔名參數

int gifcount = 3 ;
int random_gif_no = 10 ;
int random_min = 30 ; //隨機模式的間隔時間
int gifdelay = 20 ;

bool GifClock = false;   // gif 時間模式 
bool GifRandom = false ;   // gif 隨機模式 


uint8_t saturation = 100;//饱和度
uint8_t value = 100;//明度
bool colon = true;//冒号

int  H;
int  M;
int  S;//秒
int D;//星期几 0为周日
int monthDay = 1;
int currentMonth = 1;

byte tempH;
byte tempM;

/*******************EEPROM定义*********************************/
#define EEPROM_SIZE 256
#define EEPROM_GAIN         0 //确定是否已存有数据
#define EEPROM_MODE         1 //模式
#define EEPROM_COLOR        2 //时钟总颜色（冒号）
#define EEPROM_COLOR_H      3 //时钟小时颜色
#define EEPROM_COLOR_M      4 //时钟分钟颜色
#define EEPROM_COLOR_S      5 //时钟秒钟颜色
#define EEPROM_COLOR_W      6 //星期颜色
#define EEPROM_BRIGHTNESS   7 //亮度
#define EEPROM_START_H      8 //時鐘開始顯示時間H
#define EEPROM_START_M      9 //時鐘開始顯示時間M
#define EEPROM_END_H        10 
#define EEPROM_END_M        11 

#define EEPROM_GIF_COUNT    12   //Gif 播放次數
#define EEPROM_GIF_NO       13     //隨機Gif 數量
#define EEPROM_GIF_DELAY    14     //Gif 
#define EEPROM_RANDOM_MIN   15     //隨機時鐘播放間隔時間



//***************************网页配置****************************
char socketMessage[100] = {0};


// 12x20
const char* bitdata30[10]PROGMEM={
 "111111111111111111111111111111111111111111111111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111111111111111111111111111111111111111111111111",  //0
  "000011110000000111110000000111110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000000011110000111111111111111111111111111111111111",  //1
  "111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111111111111111111111111111111111111111111111111111111000000000111000000000111000000000111000000000111111111111111111111111111111111111111111111111",  //2
  "111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111111111111111111111111111111111111111111111111111",  //3
  "111100001111111100001111111100001111111100001111111100001111111100001111111100001111111100001111111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111",//4
  "111111111111111111111111111111111111111111111111111100000000111100000000111100000000111100000000111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111111111111111111111111111111111111111111111111111", //5
  "111111111111111111111111111111111111111111111111111100000000111100000000111100000000111100000000111111111111111111111111111111111111111111111111111100001111111100001111111100001111111100001111111111111111111111111111111111111111111111111111", //6
  "111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111000000011110000000111100000001111000000001111000000011110000000011110000000111100000001111000000011110000000011110000000111100000000111100000000",  //7
  "111111111111111111111111111111111111111111111111111100001111111100001111111100001111111100001111111111111111111111111111111111111111111111111111111100001111111100001111111100001111111100001111111111111111111111111111111111111111111111111111",   //8
  "111111111111111111111111111111111111111111111111111100001111111100001111111100001111111100001111111111111111111111111111111111111111111111111111000000001111000000001111000000001111000000001111111111111111111111111111111111111111111111111111"    //9
};

//7x12    
const char* bitdata12[10]PROGMEM={
  "111111111111111100011110001111000111100011110001111000111100011110001111111111111111",  //0
  "000110000111000001100000110000011000001100000110000011000001100000110001111110111111",  //1
  "111111111111110000011000001100000111111111111111111000001100000110000011111111111111",  //2
  "111111111111110000011000001100000111111111111111100000110000011000001111111111111111",  //3
  "110001111000111100011110001111000111111111111111100000110000011000001100000110000011",  //4
  "111111111111111100000110000011000001111111111111100000110000011000001111111111111111",  //5
  "111111111111111100000110000011000001111111111111111000111100011110001111111111111111",  //6
  "111111111111110000011000001100000110000011000001100000110000011000001100000110000011",  //7
  "111111111111111100011110001111000111111111111111111000111100011110001111111111111111",  //8
  "111111111111111100011110001111000111111111111111100000110000011000001111111111111111"  //9

};


// 9x12
const char* weekdata[10]PROGMEM={

 "111111111111111111110000011110000011110000011111111111111111111110000011110000011110000011111111111111111111",   //日
 "000000000000000000000000000000000000000000000111111111111111111000000000000000000000000000000000000000000000",  //一
 "000000000000000000000000000011111110011111110000000000000000000111111111111111111000000000000000000000000000",  //2
 "000000000011111110011111110000000000000000000011111110011111110000000000000000000111111111111111111000000000",//3
 "000000000111111111111111111110101011110101011110101011111001111110000011110000011111111111111111111000000000", //4
 "011111110011111110000011000000011000011111110011111110000110110001100110011000110010000110111111111111111111", //5
 "000110000000110000000000000111111110111111110000000000001001000011001100011001100010000100110000110110000110",  //6
 "001111111001000001001111111001000001001111111000000000001001000001111111010001000001111111000001000011111111",  //星
 "010100111010100101111110101010100101010100111010100101010100101010100111111110101010100101010101001100010011",  //期
 "111111111111111111110000011111111111111111111110000011111111111111111111110000011110000011110000111110000111"  //月
};


/*******************儲存空間 FS 参数定义*********************************/
const char* fsName = "LittleFS";
FS* fileSystem = &LittleFS;
LittleFSConfig fileSystemConfig = LittleFSConfig();

static bool fsOK;
String unsupportedFiles = String();

File uploadFile;

static const char TEXT_PLAIN[] PROGMEM = "text/plain";
static const char FS_INIT_ERROR[] PROGMEM = "FS INIT ERROR";
static const char FILE_NOT_FOUND[] PROGMEM = "FileNotFound";




//*******************EEPROM 基本函數*******************//

template <class T> int EEPROM_writeAnything(int ee, const T& value)
{
    const byte* p = (const byte*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          EEPROM.write(ee++, *p++);
          EEPROM.commit();
    return i;
}

template <class T> int EEPROM_readAnything(int ee, T& value)
{
    byte* p = (byte*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          *p++ = EEPROM.read(ee++);
    return i;
}
